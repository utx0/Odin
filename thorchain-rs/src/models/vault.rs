/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Vault {
    #[serde(rename = "block_height", skip_serializing_if = "Option::is_none")]
    pub block_height: Option<i64>,
    #[serde(rename = "pub_key", skip_serializing_if = "Option::is_none")]
    pub pub_key: Option<String>,
    #[serde(rename = "coins")]
    pub coins: Vec<crate::models::Coin>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "status_since", skip_serializing_if = "Option::is_none")]
    pub status_since: Option<i64>,
    /// the list of node public keys which are members of the vault
    #[serde(rename = "membership", skip_serializing_if = "Option::is_none")]
    pub membership: Option<Vec<String>>,
    #[serde(rename = "chains", skip_serializing_if = "Option::is_none")]
    pub chains: Option<Vec<String>>,
    #[serde(rename = "inbound_tx_count", skip_serializing_if = "Option::is_none")]
    pub inbound_tx_count: Option<i64>,
    #[serde(rename = "outbound_tx_count", skip_serializing_if = "Option::is_none")]
    pub outbound_tx_count: Option<i64>,
    #[serde(rename = "pending_tx_block_heights", skip_serializing_if = "Option::is_none")]
    pub pending_tx_block_heights: Option<Vec<i64>>,
    #[serde(rename = "routers")]
    pub routers: Vec<crate::models::VaultRouter>,
    #[serde(rename = "addresses")]
    pub addresses: Vec<crate::models::VaultAddress>,
    #[serde(rename = "frozen", skip_serializing_if = "Option::is_none")]
    pub frozen: Option<Vec<String>>,
}

impl Vault {
    pub fn new(coins: Vec<crate::models::Coin>, routers: Vec<crate::models::VaultRouter>, addresses: Vec<crate::models::VaultAddress>) -> Vault {
        Vault {
            block_height: None,
            pub_key: None,
            coins,
            r#type: None,
            status: None,
            status_since: None,
            membership: None,
            chains: None,
            inbound_tx_count: None,
            outbound_tx_count: None,
            pending_tx_block_heights: None,
            routers,
            addresses,
            frozen: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "AsgardVault")]
    AsgardVault,
    #[serde(rename = "YggdrasilVault")]
    YggdrasilVault,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::AsgardVault
    }
}

