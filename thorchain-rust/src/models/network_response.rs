/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NetworkResponse {
    /// total amount of RUNE awarded to node operators
    #[serde(rename = "bond_reward_rune")]
    pub bond_reward_rune: String,
    /// total of burned BEP2 RUNE
    #[serde(rename = "burned_bep_2_rune")]
    pub burned_bep_2_rune: String,
    /// total of burned ERC20 RUNE
    #[serde(rename = "burned_erc_20_rune")]
    pub burned_erc_20_rune: String,
    /// total bonded RUNE
    #[serde(rename = "total_bond_units")]
    pub total_bond_units: String,
    /// effective security bond used to determine maximum pooled RUNE
    #[serde(rename = "effective_security_bond")]
    pub effective_security_bond: String,
    /// total reserve RUNE
    #[serde(rename = "total_reserve")]
    pub total_reserve: String,
    /// Returns true if there exist RetiringVaults which have not finished migrating funds to new ActiveVaults
    #[serde(rename = "vaults_migrating")]
    pub vaults_migrating: bool,
    /// Sum of the gas the network has spent to send outbounds
    #[serde(rename = "gas_spent_rune")]
    pub gas_spent_rune: String,
    /// Sum of the gas withheld from users to cover outbound gas
    #[serde(rename = "gas_withheld_rune")]
    pub gas_withheld_rune: String,
    /// Current outbound fee multiplier, in basis points
    #[serde(rename = "outbound_fee_multiplier", skip_serializing_if = "Option::is_none")]
    pub outbound_fee_multiplier: Option<String>,
    /// the outbound transaction fee in rune, converted from the NativeOutboundFeeUSD mimir
    #[serde(rename = "native_outbound_fee_rune")]
    pub native_outbound_fee_rune: String,
    /// the native transaction fee in rune, converted from the NativeTransactionFeeUSD mimir
    #[serde(rename = "native_tx_fee_rune")]
    pub native_tx_fee_rune: String,
    /// the thorname register fee in rune, converted from the TNSRegisterFeeUSD mimir
    #[serde(rename = "tns_register_fee_rune")]
    pub tns_register_fee_rune: String,
    /// the thorname fee per block in rune, converted from the TNSFeePerBlockUSD mimir
    #[serde(rename = "tns_fee_per_block_rune")]
    pub tns_fee_per_block_rune: String,
}

impl NetworkResponse {
    pub fn new(bond_reward_rune: String, burned_bep_2_rune: String, burned_erc_20_rune: String, total_bond_units: String, effective_security_bond: String, total_reserve: String, vaults_migrating: bool, gas_spent_rune: String, gas_withheld_rune: String, native_outbound_fee_rune: String, native_tx_fee_rune: String, tns_register_fee_rune: String, tns_fee_per_block_rune: String) -> NetworkResponse {
        NetworkResponse {
            bond_reward_rune,
            burned_bep_2_rune,
            burned_erc_20_rune,
            total_bond_units,
            effective_security_bond,
            total_reserve,
            vaults_migrating,
            gas_spent_rune,
            gas_withheld_rune,
            outbound_fee_multiplier: None,
            native_outbound_fee_rune,
            native_tx_fee_rune,
            tns_register_fee_rune,
            tns_fee_per_block_rune,
        }
    }
}


