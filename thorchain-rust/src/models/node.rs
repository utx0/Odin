/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Node {
    #[serde(rename = "node_address")]
    pub node_address: String,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "pub_key_set")]
    pub pub_key_set: Box<crate::models::NodePubKeySet>,
    /// the consensus pub key for the node
    #[serde(rename = "validator_cons_pub_key")]
    pub validator_cons_pub_key: String,
    /// the P2PID (:6040/p2pid endpoint) of the node
    #[serde(rename = "peer_id")]
    pub peer_id: String,
    /// the block height at which the node became active
    #[serde(rename = "active_block_height")]
    pub active_block_height: i64,
    /// the block height of the current provided information for the node
    #[serde(rename = "status_since")]
    pub status_since: i64,
    #[serde(rename = "node_operator_address")]
    pub node_operator_address: String,
    /// current node bond
    #[serde(rename = "total_bond")]
    pub total_bond: String,
    #[serde(rename = "bond_providers")]
    pub bond_providers: Box<crate::models::NodeBondProviders>,
    /// the set of vault public keys of which the node is a member
    #[serde(rename = "signer_membership")]
    pub signer_membership: Vec<String>,
    #[serde(rename = "requested_to_leave")]
    pub requested_to_leave: bool,
    /// indicates whether the node has been forced to leave by the network, typically via ban
    #[serde(rename = "forced_to_leave")]
    pub forced_to_leave: bool,
    #[serde(rename = "leave_height")]
    pub leave_height: i64,
    #[serde(rename = "ip_address")]
    pub ip_address: String,
    /// the currently set version of the node
    #[serde(rename = "version")]
    pub version: String,
    /// the accumlated slash points, reset at churn but excessive slash points may carry over
    #[serde(rename = "slash_points")]
    pub slash_points: i64,
    #[serde(rename = "jail")]
    pub jail: Box<crate::models::NodeJail>,
    #[serde(rename = "current_award")]
    pub current_award: String,
    /// the last observed heights for all chain by the node
    #[serde(rename = "observe_chains")]
    pub observe_chains: Vec<crate::models::ChainHeight>,
    #[serde(rename = "preflight_status")]
    pub preflight_status: Box<crate::models::NodePreflightStatus>,
}

impl Node {
    pub fn new(node_address: String, status: Status, pub_key_set: crate::models::NodePubKeySet, validator_cons_pub_key: String, peer_id: String, active_block_height: i64, status_since: i64, node_operator_address: String, total_bond: String, bond_providers: crate::models::NodeBondProviders, signer_membership: Vec<String>, requested_to_leave: bool, forced_to_leave: bool, leave_height: i64, ip_address: String, version: String, slash_points: i64, jail: crate::models::NodeJail, current_award: String, observe_chains: Vec<crate::models::ChainHeight>, preflight_status: crate::models::NodePreflightStatus) -> Node {
        Node {
            node_address,
            status,
            pub_key_set: Box::new(pub_key_set),
            validator_cons_pub_key,
            peer_id,
            active_block_height,
            status_since,
            node_operator_address,
            total_bond,
            bond_providers: Box::new(bond_providers),
            signer_membership,
            requested_to_leave,
            forced_to_leave,
            leave_height,
            ip_address,
            version,
            slash_points,
            jail: Box::new(jail),
            current_award,
            observe_chains,
            preflight_status: Box::new(preflight_status),
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Active")]
    Active,
    #[serde(rename = "Whitelisted")]
    Whitelisted,
    #[serde(rename = "Standby")]
    Standby,
    #[serde(rename = "Disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

