/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ObservedTx {
    #[serde(rename = "tx")]
    pub tx: Box<crate::models::Tx>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "out_hashes", skip_serializing_if = "Option::is_none")]
    pub out_hashes: Option<Vec<String>>,
    /// same as external_observed_height, to be deprecated in favour of external_observed_height
    #[serde(rename = "block_height", skip_serializing_if = "Option::is_none")]
    pub block_height: Option<i64>,
    /// the block height on the external source chain when the transaction was observed, not provided if chain is THOR
    #[serde(rename = "external_observed_height", skip_serializing_if = "Option::is_none")]
    pub external_observed_height: Option<i64>,
    #[serde(rename = "signers", skip_serializing_if = "Option::is_none")]
    pub signers: Option<Vec<String>>,
    #[serde(rename = "observed_pub_key", skip_serializing_if = "Option::is_none")]
    pub observed_pub_key: Option<String>,
    #[serde(rename = "keysign_ms", skip_serializing_if = "Option::is_none")]
    pub keysign_ms: Option<i64>,
    /// same as external_confirmation_delay_height, to be deprecated in favour of external_confirmation_delay_height
    #[serde(rename = "finalise_height", skip_serializing_if = "Option::is_none")]
    pub finalise_height: Option<i64>,
    /// the block height on the external source chain when confirmation counting will be complete, not provided if chain is THOR
    #[serde(rename = "external_confirmation_delay_height", skip_serializing_if = "Option::is_none")]
    pub external_confirmation_delay_height: Option<i64>,
    /// the outbound aggregator to use, will also match a suffix
    #[serde(rename = "aggregator", skip_serializing_if = "Option::is_none")]
    pub aggregator: Option<String>,
    /// the aggregator target asset provided to transferOutAndCall
    #[serde(rename = "aggregator_target", skip_serializing_if = "Option::is_none")]
    pub aggregator_target: Option<String>,
    /// the aggregator target asset limit provided to transferOutAndCall
    #[serde(rename = "aggregator_target_limit", skip_serializing_if = "Option::is_none")]
    pub aggregator_target_limit: Option<String>,
}

impl ObservedTx {
    pub fn new(tx: crate::models::Tx) -> ObservedTx {
        ObservedTx {
            tx: Box::new(tx),
            status: None,
            out_hashes: None,
            block_height: None,
            external_observed_height: None,
            signers: None,
            observed_pub_key: None,
            keysign_ms: None,
            finalise_height: None,
            external_confirmation_delay_height: None,
            aggregator: None,
            aggregator_target: None,
            aggregator_target_limit: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "done")]
    Done,
    #[serde(rename = "incomplete")]
    Incomplete,
}

impl Default for Status {
    fn default() -> Status {
        Self::Done
    }
}

