/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Thorname {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "expire_block_height", skip_serializing_if = "Option::is_none")]
    pub expire_block_height: Option<i64>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    #[serde(rename = "preferred_asset")]
    pub preferred_asset: String,
    /// Amount of RUNE currently accrued by this thorname in affiliate fees waiting to be swapped to preferred asset.
    #[serde(rename = "affiliate_collector_rune", skip_serializing_if = "Option::is_none")]
    pub affiliate_collector_rune: Option<String>,
    #[serde(rename = "aliases")]
    pub aliases: Vec<crate::models::ThornameAlias>,
}

impl Thorname {
    pub fn new(preferred_asset: String, aliases: Vec<crate::models::ThornameAlias>) -> Thorname {
        Thorname {
            name: None,
            expire_block_height: None,
            owner: None,
            preferred_asset,
            affiliate_collector_rune: None,
            aliases,
        }
    }
}


