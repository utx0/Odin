/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StreamingSwap {
    /// the hash of a transaction
    #[serde(rename = "tx_id", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// how often each swap is made, in blocks
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<i32>,
    /// the total number of swaps in a streaming swaps
    #[serde(rename = "quantity", skip_serializing_if = "Option::is_none")]
    pub quantity: Option<i32>,
    /// the amount of swap attempts so far
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// the block height of the latest swap
    #[serde(rename = "last_height", skip_serializing_if = "Option::is_none")]
    pub last_height: Option<i64>,
    /// the total number of tokens the swapper wants to receive of the output asset
    #[serde(rename = "trade_target", skip_serializing_if = "Option::is_none")]
    pub trade_target: Option<String>,
    /// the number of input tokens the swapper has deposited
    #[serde(rename = "deposit", skip_serializing_if = "Option::is_none")]
    pub deposit: Option<String>,
    /// the amount of input tokens that have been swapped so far
    #[serde(rename = "in", skip_serializing_if = "Option::is_none")]
    pub r#in: Option<String>,
    /// the amount of output tokens that have been swapped so far
    #[serde(rename = "out", skip_serializing_if = "Option::is_none")]
    pub out: Option<String>,
    /// the list of swap indexes that failed
    #[serde(rename = "failed_swaps", skip_serializing_if = "Option::is_none")]
    pub failed_swaps: Option<Vec<i32>>,
    /// the list of reasons that sub-swaps have failed
    #[serde(rename = "failed_swap_reasons", skip_serializing_if = "Option::is_none")]
    pub failed_swap_reasons: Option<Vec<String>>,
}

impl StreamingSwap {
    pub fn new() -> StreamingSwap {
        StreamingSwap {
            tx_id: None,
            interval: None,
            quantity: None,
            count: None,
            last_height: None,
            trade_target: None,
            deposit: None,
            r#in: None,
            out: None,
            failed_swaps: None,
            failed_swap_reasons: None,
        }
    }
}


