/*
 * Thornode API
 *
 * Thornode REST API.
 *
 * The version of the OpenAPI document: 1.119.0
 * Contact: devs@thorchain.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`keysign`]
#[derive(Clone, Debug, Default)]
pub struct KeysignParams {
    pub height: i64
}

/// struct for passing parameters to the method [`keysign_pubkey`]
#[derive(Clone, Debug, Default)]
pub struct KeysignPubkeyParams {
    pub height: i64,
    pub pubkey: String
}

/// struct for passing parameters to the method [`metrics`]
#[derive(Clone, Debug, Default)]
pub struct MetricsParams {
    /// optional block height, defaults to current tip
    pub height: Option<i64>
}

/// struct for passing parameters to the method [`metrics_keygen`]
#[derive(Clone, Debug, Default)]
pub struct MetricsKeygenParams {
    pub pubkey: String,
    /// optional block height, defaults to current tip
    pub height: Option<i64>
}


/// struct for typed errors of method [`keysign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum KeysignError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`keysign_pubkey`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum KeysignPubkeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`metrics`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MetricsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`metrics_keygen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MetricsKeygenError {
    UnknownValue(serde_json::Value),
}


/// Returns keysign information for the provided height - the height being the first block a tx out item appears in the signed-but-unobserved outbound queue.
pub async fn keysign(configuration: &configuration::Configuration, params: KeysignParams) -> Result<crate::models::KeysignResponse, Error<KeysignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let height = params.height;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/thorchain/keysign/{height}", local_var_configuration.base_path, height=height);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<KeysignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns keysign information for the provided height and pubkey - the height being the block at which a tx out item is scheduled to be signed and moved from the scheduled outbound queue to the outbound queue.
pub async fn keysign_pubkey(configuration: &configuration::Configuration, params: KeysignPubkeyParams) -> Result<crate::models::KeysignResponse, Error<KeysignPubkeyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let height = params.height;
    let pubkey = params.pubkey;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/thorchain/keysign/{height}/{pubkey}", local_var_configuration.base_path, height=height, pubkey=crate::apis::urlencode(pubkey));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<KeysignPubkeyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns keygen and keysign metrics for current vaults.
pub async fn metrics(configuration: &configuration::Configuration, params: MetricsParams) -> Result<crate::models::MetricsResponse, Error<MetricsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let height = params.height;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/thorchain/metrics", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MetricsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns keygen metrics for the provided vault pubkey.
pub async fn metrics_keygen(configuration: &configuration::Configuration, params: MetricsKeygenParams) -> Result<Vec<crate::models::KeygenMetric>, Error<MetricsKeygenError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let pubkey = params.pubkey;
    let height = params.height;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/thorchain/metric/keygen/{pubkey}", local_var_configuration.base_path, pubkey=crate::apis::urlencode(pubkey));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<MetricsKeygenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

